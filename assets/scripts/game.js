/* 
Red = Ded by Malav Mehta, Justin Lu and Thomas Cwintal submitted on Friday, June 14, 2019
to Mr. Benjamin Hudson as part of the ICS2O course.

This game was created for clients from Thomas Darcy McGee, and was created to explore the usage
and knowledge of JS Document Object Models, Loops, Logic (selection, string), CSS styling techniques,
including Classes, Ids, and root variables, and finally HTML knowledge used to script the website.

This is the game JavaScript file containing all functions used for the creation of the game.
*/

/*
some code and functions were taken from Marijn Haverbeke's Eloquent Javascript Book, 
in which there are many tutorials regarding the creation of games and good practices when
creating web games. link: https://eloquentjavascript.net/16_game.html (used under the CCO license)

specifically, this website was used given the fact that it is one of the only sources that
outlines a process on how to create web games using DOM

throughout the coding of our game, we followed the tutorial and created the game ourselves, although
as part of the tutorial our code was taken from the website

please visit https://docs.google.com/document/d/1G0Nvdf52JWfvDiELmCuWiqcsbmnY_lqNMnFokaoHyLw/edit?usp=sharing
for a complete list of all the reference lines of code
*/


/*
here, we create all the game levels in the form of a list
players progress through levels in the for loop logic indicated at the bottom of the page

levels are created using these strings, which are mapped in an array of arrays of
characters (further explained below)
*/

var gameLevels = [
    `###################################################################
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.............................................o...................#
#....@...................................###########..............#
#.................................................................#
#.........................o....o..................................#
#........................########.................................#
#.................................................................#
#...............o.................................................#
###################################################################`,
    `###################################################################
#.................................................................#
#.................................................................#
#....................................................o............#
#...................................................###...........#
#...................................................###..o........#
#...................................................###...........#
#...............................................o...###.....o.....#
#..............................................###..###...........#
#....................o...............o.........###..###......o....#
#...@................#.........................###..###...........#
#...................##.....................o...###..###......o....#
#..................###..............+++...###..###..###...........#
#......o..........####...........o..+++...###++###++###+++++++++++#
#########++++++++#####++++++++++####+++############################
###################################################################`,
    `###################################################################
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#...###############...............................................#
#...#.........#...#...............................................#
#...#.........#...#...............................................#
#...#....M....#.o.#...............................................#
#...###########.#.#.............................#......M....o.....#
#...............#o#............................####################
#...@...........#.................................................#
#.......o.....o.#M...#...o...M...o...#................M....o......#
###################################################################
###################################################################
###################################################################
###################################################################`,
    `###################################################################
#..........................................................v......#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.......................#..o.....M.....o..#.......................#
#............o..........###################..........o............#
#.........@.###...................................######..........#
#.......................................v......v.................o#
#........................o......................................###
#.................................................................#
#............................................................o....#
#..........................................................########
#.................................................................#
#..............o..o............#.....o....M.o.......#.............#
#####################..........######################.............#
#####################..........######################.............#
#####################++++++++++######################+++++++++++++#
###################################################################`,
    `###################################################################
#.o.........................................#.....................#
#..............................@............#............o......o.#
#..............................o............#......o.....#......#.#
#...........................................#......#.....#......#.#
#..............................o............#......#.....#.....o#.#
#.o.........................................#...o..#..o..#.....##.#
#####################.#........o............#...#..#..#..#......#.#
#.....................#.........................#..#..#..#......#.#
#..........o..........#........o................#++#++#++#++oo++#.#
#....................o#...................o.#####################.#
#....................##........o.......o.########################.#
#.....................#................##########################o#
#...................................#############################.#
#.o......+++++++......o..........################################.#
#################################################################o#
#################################################################.#
#################################################################.#
#################################################################o#
#################################################################.#
#################################################################o#
#################################################################.#
#################################################################.#
#################################################################.#
#################################################################.#
#################################################################.#
#################################################################o#
#################################################################+#`,
    `###################################################################
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#........................................................o........#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#............l..........................o.........................#
#.................................................................#
#..@............................#################.................#
#................................................................+#
#.......o.........o....o............o.o.o.o.o....................+#
###################################################################`,
    `###################################################################
#.................................................v...............#
#.................................................................#
#.................................................................#
#.................................................................#
#.............................................................o...#
#................................................###.....##########
#.................................................................#
#.................................................................#
#........................o................o.......................#
#........................#..o...l.=...o...#.......................#
#.......................###################.......................#
#.................................................................#
#.................................................................#
#...@.............l..................................#.....=......#
#.............######.................................#.....o......#
#....................................................##############
#...l.............................................................#
#..o.o..........................................................o.#
###################################################################`,
    `###################################################################
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.......................................................s.........#
#.................................................................#
#.............o...................................................#
#...........####...................................##########.....#
#...........#.....................................................#
#..........o#...........................o.........................#
#..........##.........................#####.......................#
#..@........#.....................................................#
#...........#.....#......#......#.......#......#......#...........#
#.......o...#.....o......o......o.......o......o......o...........#
###################################################################`,
    `###################################################################
#...........#........................................v..........###
#...........#...................................................###
#...........#..#=...............................................###
#...........#..#=.....o.......#..o......=.......#....o..........###
#...........#..################################################o###
#...........##.################################################.###
#...........#..################################################.###
#...........#..################################################.###
#...........#..#.o.........=......=.......=.......=.......=####.###
#...........##.###o########o############o#####o#####o#####.##o....#
#...........#..#########v#v#v#v###########################.######.#
#...........#...................................................#.#
#...........#........o................o......................o..#.#
#...........#..##################+#+#+#++#+++#+++#++#+###########.#
#...........##.############.............................#########o#
#...........#..############.............................#########.#
#...........#..############.............................#########.#
#...........#..############.o....................o......#########.#
#...........##.################.......#...#######.##.############o#
#...........#..############........####....######.##.############.#
#...........#..########.........#######...o######.##.############.#
#...........#......o.=......##########....#######.##.############.#
#...........######.####################...#######.##+############.#
#...........#####..####################...#######.###############.#
#...........####..#####################...#######.###############.#
#...........#o....######################..#######.###############.#
########....#o#########################...#######.#######o........#
#......#....#o#########################...#######o#######.#########
#.....v#....#o#########################...#######.######+.#########
#......#....#o#########################o..#######.#######.#########
#...@..#....#o##########################.########.#######.#########
#......#....#o...........................########.#######.#########
#...s..#....############################.########.#######.#####..o#
#......o..........................................................#
################################################################++#`,
    `###################################################################
#......................########...................................#
#......................########...................................#
#.@....................########...........................o.......#
#......................########...................................#
#......................########...................................#
#......................########...................................#
#......................########................o..................#
########...............########..............########.............#
########...............########............o.########......o......#
########...............########...........###########.............#
########++++....o..++++########......=o......########.............#
########...............#######+.......#......########.............#
########...............#######+..............########........o....#
########...............#######+.o............########.............#
########...............############..........########.............#
########......+++......########.......#......########.............#
########...............########............o.########.............#
########...............########............##########.............#
########...............########.......=......########.........o...#
########...............########.......#......########.............#
########+++++++++..o...########.o............########.............#
########...............##########............########.............#
########...............########.......o......########.............#
########...............########.......#......########.............#
########...............########..............########........o....#
########............+++########.............o########.............#
########...................................##########.............#
########.....................................########.............#
########......o...............o.o.o..........########+++++++++++++#
###################################################################`,
    `###################################################################
#.................................................................#
#.................................................................#
#.................................................................#
#........#........................................................#
#..@.....#........................................................#
#........#........................................................#
#......g.#........................................................#
#############.....................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#......................o..........................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.........................o.......................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#...........................o.....................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#............................o....................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.............................o...................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.............................o...................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#..............................o..................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#...............................o.................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#.................................................................#
#...............................o.................................#
#.................................................................#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
###################################################################`,
    `###################################################################
#..............#...........v.....v......v.......v......v.....v....#
#..............#............................o.....................#
#..............#....................................o.............#
#..............#.........o....o.......o....................o.....o#
#..............#o.....#############################################
#..............##...v....v....v....v....v....v....v...............#
#..............#......o..............o.........o..................#
#..............#..................................................#
#..............#..................................................#
#..............#o..........o....o..=......o.......................#
#..............##########################################.........#
#..............#....................#...........................o.#
#..............#.........o..........#.........................#####
#........o.....#.........#...=.....=#.............................#
#..............#.........#..........#.............................#
#..@.....+.....#.o.=.....#...=.....=#........................o....#
#.......##.....######....#..........#.....................#########
#......###...............#.........=#.............................#
#.....####......o..o..o..#...=......=.......=....=....=.....=.....#
##########++++############...=.o....=.......=....=....=.....=.....#
###################################################################`,
    `###################################################################
#...................#............+.....+................#........+#
#...@...............#............................................+#
#...................#............o.....o........o................+#
#.o.................#..........................+#+...............+#
#...................#.........................+++++.....o......o.+#
#...................#...........+.....+...o.+++++++++...#+++++++++#
#.....o.............#...o....+#####################################
#...................#..###.....=......................o..........+#
#...................#.................................o..........+#
#......o.....o......#...o.....o..................=....o..........+#
#.........o.+#+.....######+++###############################+...o+#
#.......o+#++++........................o........................###
#......##++++++....o..........o....o........o...........o........+#
#......########..................................................+#
#+++++++++++++++++####+++#####++##++#+#++###+++#++#+###############
###################################################################`,
    `###################################################################
#........................vvvvvvvvvvv..............................#
#.....o...........................................................#
#.................................................................#
#.....@.............o.............................................#
#.....o.......o.....#.............................................#
#.................................................................#
#.............#.....................vvvvvvvvv.....................#
#...o.........#.....o.............................................#
#.............#.....#.............................................#
#.............#...................................................#
#.....o.......#...................................................#
#.............#..........o.o.o.o.o.o.o.o.o.o.o....................#
#......................#########################..................#
#.......o...............................................o.........#
#.......................................................#.........#
#................+................................................#
#.....o..........................................................o#
#................................................................##
#...............................................#=......=....=...=#
#....o..............vvvvvvv.....................#=......=....=...=#
#................o..vvvvvvv.o...................#=......o....=..o=#
#.....#..........#..........#.........#.........###################
#++++++++++++++++++++++++++++++++++++++++++++######################
###################################################################`,
    `#############################################################################
#vvvvvvvv.vvvvvvv#vvvvvvvvv...vvvvvvvvvvv...vvvvvvvvvvvvvvvvvvvvv...........#
#................#..........................................................#
#................#..........................................................#
#@...............#..........................................................#
#................#..........................................................#
#..o....o........#..........................................................#
#########........#..........................................................#
#.......#........#................o..o......................................#
#.......#.......o#..............o...........................................#
#.......########.#.............o..###..o....................................#
#......o#......=o#............o...###....o..................................#
#...=..##.....=.o#oooooooooooo....###.....oooooooooooooooooooooo............#
#.......#....=..o################################################..........o#
#o......#...=...o#.........................................................##
##......#..=....o#..........................................................#
#...=...#.=.....o#..........................................................#
#.......#=......o#........................................................o.#
#......o#.......o#......................................................#####
#......##........#....................o........o...........o................#
#.......#........#....................#........#..........##=...............#
#...=...#........#....................#........#.........####=..............#
#o......#........#....................#........#........######=.............#
##......#........#....................#...=o...#.....o.########=...........o#
#.............................o.#############################################
#.........................o.#################################################
#++++..o..o..o..o.......#####################################################
#############################################################################`

];



var globalLevel = 0; // along with the game levels, this variable needs to be generated at the top to minimise latency
var deaths = 0; // creating a global death variable for saving progress

/*
here, we import all the the audio used for the websites
the sources of the audio will be soon be cited

audio included background music and sfx for when colliding with
certain items
*/

var bgAudio = document.createElement("audio"); // background score
var retroMusic = document.createElement("source");
retroMusic.setAttribute("src", "assets/audio/bg.mp3");
retroMusic.setAttribute("type", "audio/mpeg");
bgAudio.appendChild(retroMusic);
bgAudio.volume = 0.275; // lowering background audio to ensure that it does not annoy the user
bgAudio.loop = true; // the backgroud audio is short and must be looped to maintain 

var coinCollected = document.createElement("audio"); // coin collection sfx
var coinSound = document.createElement("source");
coinSound.setAttribute("src", "assets/audio/coin.wav");
coinSound.setAttribute("type", "audio/wav");
coinCollected.appendChild(coinSound);

var gameLost = document.createElement("audio"); // game lost sfx
var loseSound = document.createElement("source");
loseSound.setAttribute("src", "assets/audio/lose.wav");
loseSound.setAttribute("type", "audio/wav");
gameLost.appendChild(loseSound);

var hitMonster = document.createElement("audio"); // monster hit sfx
var hitSound = document.createElement("source");
hitSound.setAttribute("src", "assets/audio/hit.wav");
hitSound.setAttribute("type", "audio/wav");
hitMonster.appendChild(hitSound);

var gameWon = document.createElement("audio"); // game won sfx
var winSound = document.createElement("source");
winSound.setAttribute("src", "assets/audio/win.wav");
winSound.setAttribute("type", "audio/wav");
gameWon.appendChild(winSound);

var powerupCollected = document.createElement("audio") // power up sfx
var powerupSound = document.createElement("source");
powerupSound.setAttribute("src", "assets/audio/powerup.wav");
powerupSound.setAttribute("type", "audio/wav");
powerupCollected.appendChild(powerupSound);

// the level variable which creates level information in the form of a class (so that it can be reused for all levels, and to minimise latency by using a class and not a complex function)
var Level = class Level { // levels are grid plans, which are then filled with vectors
    constructor(levelPlan) { // class constructor, which create the level plan in the form of characters comprehensible by the js file
        let levelInArray = levelPlan.trim().split("\n").map(l => [...l]); // splitting the level plan, trimming white space, splitting by every new line, and mapping it into lines; essentially, this creates an array of array of characters
        this.height = levelInArray.length; // the height is the amount of character arrays in the row array
        this.width = levelInArray[0].length; // the width is the length of one singular row (all rows are the same length)

        this.gameActors = []; // list containing all the actors (meaning players, coins, lava) that are added to the list for creation and updation
        this.levelInArray = levelInArray.map((row, y) => { // mapping the level plan to create the actors on the level
            return row.map((character, x) => { // the two variables that will be used later for the creation of actors
                let type = levelChars[character]; // type of character determined based on dictionnary, and different types of characters point to class
                if (typeof type == "string") { return type; } // returns the type/class if the character is a string
                this.gameActors.push(type.create(new Vector(x, y), character)); // add the actor to the actor list, and create a new vector for the actor based on its class (creates by calling on the static create method of the Class)
                return "empty"; // if the actor is not in the level chars, return an empty cell for the grid in through which everything is displayed
            });
        });
    }
}

var State = class State { // variable, in the form of a class, containing all information pertaining to the current status of the game
    constructor(level, actors, status) { // constructs the variable in a class constructor
        this.level = level; // set level for status
        this.actors = actors; // select actors for current level and update status accordingly
        this.status = status; // status determines the actual status of the game; playing, won, lost and gameover statuses are available
    }

    static start(level) { // static method for the class, used for creating objects throughout the file, in this case this creates a new State for the game, assigned to the state variable which will be passed in the main game loop
        return new State(level, level.gameActors, "playing"); // when the game begins, these values are used for the level
    }

    get player() { // get method for the class, used to retrieve information pertaining to the player
        return this.actors.find(actor => actor.type == "player"); // find the player amongst all the actors using the "a => a" method
    }
}

var Vector = class Vector { // the variable/class through which all actors are created in the form of vector based scalable graphics
    constructor(x, y) { // information containing the size of the actor
        this.x = x; // the x value of the vector actor
        this.y = y; // the y value of the vector actor
    }

    plus(other) { // plus function used to move vector object positions
        return new Vector(this.x + other.x, this.y + other.y); // other.(any) values come from the new, moves position of the vector, or game actor, that will get regenerated on the map in the next frame
    }

    times(factor) { // times function used to scale the graphics with a predetermined factor
        return new Vector(this.x * factor, this.y * factor); // the factor is stored in a global value to dynamically change the game size as required
    }
}

var Player = class Player { // player variable defined by the player class
    constructor(position, speed) { // the player constructor create the position and the speed of the player both values that are constantly updated and available at low latency in the form of classes
        this.position = position; // the current position of the player, in the form of a player
        this.speed = speed; // the current speed of the player, both vertical and horizontal
    }

    get type() { return "player"; } // used in the creation of the level plan

    static create(position) {
        return new Player(position.plus(new Vector(0, -0.5)), new Vector(0, 0)); // the new vector for the player is created every time there is a new frame, and it is created based on the position and speed of the previous vector
    }
}

Player.prototype.size = new Vector(0.8, 1.5); // the size is defined as a prototype outside the class for a more efficient method to create and access this value

var RedBlockSpeed = 2.5; // the speed of the red blocks, stored as changeable variables (needs to be changes in the case of powerup usage)

var RedBlock = class RedBlock { // variables that is used to create lava actors, again the form of classes to minimize code redundancy
    constructor(position, speed, resetPosition) { // constructor contains all variables pertinent to creation of redblocks, although not all are used by all the types of redblocks
        this.position = position; // position, standard for all actors
        this.speed = speed; // speed, for moving blocks
        this.resetPosition = resetPosition; // reset, for dripping blocks
    }

    get type() { return "RedBlock"; } // used for the level plan creation, when creating actors

    static create(position, character) { // static method to create the lava blocks
        if (character == "=") { // different blocks are created based on the characters defined in the levels
            return new RedBlock(position, new Vector(RedBlockSpeed, 0)); // moving redblock (vertical)
        } else if (character == "|") {
            return new RedBlock(position, new Vector(0, RedBlockSpeed)); // moving redblock (horizontal)
        } else if (character == "v") {
            return new RedBlock(position, new Vector(0, RedBlockSpeed), position); // dripping redblock (position is reset at the end of the speed movements)
        }
    }
}

RedBlock.prototype.size = new Vector(1, 1); // size is defined outside of the variable for the same reason as that of the player

var monsterSpeed = RedBlockSpeed * 3; // the speed of the monsters is faster than the redblocs, given that the monsters should be harder to defeat

class Powerup { // powerups defined as separate classes (there are 5 different types of powerups)
    constructor(position, charactertype) { // constructor calls for and defines all values needed to create the powerups
        this.position = position;
        this.charactertype = charactertype;
    }

    get type() { return "powerup"; } // used for the level plan creation

    static create(position, character) { // static method for intial creation of powerups
        this.charactertype = character; // getting the character type
        return new Powerup(position.plus(new Vector(0, -1)), this.charactertype); // create the powerup based on the type of character
    }

    update() { // powerup is updated on the case of collision
        return new Powerup(this.position, this.charactertype); // the new powerup, generated based on the update
    }

    collide(state) { // the collision detector, which determines what to do on the case of collision
        let filtered = state.actors.filter(actors => actors != this); // removes the actor from the screen/display
        powerupCollected.play() // the powerup collection sfx is played
        if (this.charactertype == "s") {
            Player.prototype.size = new Vector(0.4, 0.75); // if the ch (ch means character) is s, then creates a new, smaller player
        } else if (this.charactertype == "l") {
            Player.prototype.size = new Vector(1.6, 3); // if the ch is l, then creates a new, larger player
        } else if (this.charactertype == "p") {
            RedBlockSpeed = 1; // if the ch is p, then the redblock speed is reduced, creating a slow motion effect for the surroundings of the player
        } else if (this.charactertype == "g") {
            playerGravity = 15; // if the ch is g, then the gravity is lowered to 15, used in levels required low gravity
        } else if (this.charactertype == "f") {
            playerXSpeed = 15; // if the ch is f, then the player speed is augmented to 15, making the player faster for some levels
        } else if (this.charactertype == "P") {
            monsterSpeed = RedBlockSpeed; // with this powerups, the monsters are slowed down by 3 times
        }
        return new State(state.level, filtered, state.status); // updates the state with the removed powerup from the actors list, essentially removing the powerup from the screen
    }
}

Powerup.prototype.size = new Vector(0.75, 0.75); // sets a predetermined size for all powerups to maintain efficiency

class Monster { // class for creating monsters (monsters are characters tha chase the player, and can be killed if the player jumps on top of them)
    constructor(position, speed, chase) {
        this.position = position; // the initial position of the monster
        this.speed = speed; // the horizontal speed of the monster
        this.chase = chase; // determines whether or not the monster is to chase the player
    }

    get type() { // type used to create levels as well to fill in the color of the monster in the CSS code
        return "monster";
    }
    static create(position, character) { // determines whether or not the monster is to chase the player, as well as the starting position of the monster
        if (character == 'm') {
            // monster that moves back and forth
            return new Monster(position.plus(new Vector(0, -1)), new Vector(3, 0), false);
        } else { // 'M'
            // monster that chases player
            return new Monster(position.plus(new Vector(0, -1)), new Vector(3, 0), true);
        }
    }

    update(time, state) { // function that updates the monster every frame
        if (this.chase) { // if the monster is to chase the player, this code must be executed to determine the direction of the monster
            if (state.player.position.x < this.position.x) { // determines if player is on the left side of the monster
                this.speed = new Vector(-monsterSpeed, 0); // goes left is the player is on left of the monster
            } else {
                this.speed = new Vector(monsterSpeed, 0); // goes right if the player is not on the left of the monster
            }
        }

        let newposition = this.position.plus(this.speed.times(time)); // the new position is generated based on the direction of chase)

        if (!state.level.touches(newposition, this.size, "wall")) {
            return new Monster(newposition, this.speed, this.chase); // if the monster is not touching a wall, then the monster continues to go towards its current direction
        } else {
            return new Monster(this.position, this.speed.times(-1), this.chase); // if the monster does not chase the player and is touching a wall, then it reverses direction
        }
    }

    collide(state) { // function that determines what happens when the player collides with the monster
        let player = state.player; // get the player value from the global state variable containing all information pertinent to the state of the game
        let monster = this; // set the monster value equal to "this" (this function takes place within the monster's code)
        if (monster.position.y - player.position.y > 1) { // determines whether or not the player hit the monster on the top
            let filtered = state.actors.filter(a => a != this); // if the player jumps on top of the monster, the monster is filtered (see: removed) from the lits of game actors, and this is updated in the state
            hitMonster.play(); // the SFX for killing a monster is player
            return new State(state.level, filtered, state.status); // the new state is returned to the state variable, and teh game is updated accordingly
        } else {
            return new State(state.level, state.actors, 'lost'); // if the player did not jump on the monster but still hit the player, the player loses the game, and the state variable contains the "lost" status, ending//restarting the game
        }
    }
}

Monster.prototype.size = new Vector(1.3, 2); // setting the monster size to be big

var Coin = class Coin { // class used to create all the coins on the level (all coins must be collected to move on to the next level)
    constructor(position, intialposition, wobble) { // constructor creates the intial variables required for each coin
        this.position = position; // the current position of the coin, updated by the wobble//update function
        this.intialposition = intialposition; // initial/baseposition for the wobble function to refer to when needed
        this.wobble = wobble; // determines how much to wobble the coins based on the external wobble variable
    }

    get type() { return "coin"; } // returns needed type for the level creation/css background fill

    static create(position) {
        let intialposition = position.plus(new Vector(0.2, 0.1)); // create the initial coin based on the initial position when the create function is first called
        return new Coin(intialposition, intialposition, Math.random() * Math.PI * 2); // returns a new coin to the state gameActors list with the wobble accounted for
    }
}

Coin.prototype.size = new Vector(0.65, 0.65); // setting the size of the coin (purposefully small to emphasize the wobble effect)

var levelChars = { // every single character type is defined in this list, used by the var Level and the class Level to parse the intial level designs that are constructed in strings
    ".": "empty", // no classes are created for the empty characters (grid spaces are left empty in terms of actors, and simply colored blue)
    "#": "wall", // creates walls
    "+": "RedBlock", // creates static redblocks
    "M": Monster, // 2 characters are defined as montsers, and individually separated within the monster class
    "m": Monster,
    "s": Powerup, // 6 powerup types, distinguishable in the powerup class
    "l": Powerup,
    "p": Powerup,
    "g": Powerup,
    "f": Powerup,
    "P": Powerup,
    "@": Player,
    "o": Coin,
    "P": Powerup,
    "=": RedBlock, // 3 different dynamic redblocks, distinguishable in the redblock class
    "|": RedBlock,
    "v": RedBlock
};


/*
singular function to append all elements to the DOM display for all users to see
often used in a for loop or in the map function in order to create all table cells that are to appear in the table display
the function that actually makes the elements appear for the client to see
*/

function createElements(name, attributes, ...children) { // name = the element to create, list of attributes to set, children = list of children to append to the element shown on screen
    let shownOnScreen = document.createElement(name); // the element shown on the screen is create through dynamic DOM coding
    for (let attribute of Object.keys(attributes)) { // for loop that runs through all the attributes that are initially sent through the function (attributes are in the form of a dictionnary)
        shownOnScreen.setAttribute(attribute, attributes[attribute]); // for each attribute that is run through in the for loop, the actual attribute of the element shown on the screen is changed as well (used to assign classes to actors, which are used to color the actors certain colors)
    }
    for (let child of children) { // for loop that goes through all the children elements that are to be created on the screen (if applicable)
        shownOnScreen.appendChild(child); // appends all the required children to the screen (these are all the internal table cells, each reflecting a game actor)
    }
    return shownOnScreen; // returns the element for it to be added to its parent (the html document itself);
}

var gameScreen = class gameScreen { // the gameScreen variable holds the table, in which all the actors and the background is created
    constructor(documentElement, level) {
        this.shownOnScreen = createElements("div", { class: "game" }, drawGrid(level)); // createElements called, new div generated, with the children being the grid drawn from the level
        this.actorLayer = null; // actors are created on a different level, and this is initially set to null (so the background can be created seperately and more efficiently than the actors, reducing latency)
        documentElement.appendChild(this.shownOnScreen); // appends the div containing the game to the document element to which it is supposed to belong to 
    }

    clear() { this.shownOnScreen.remove(); } // when gameScreen.clear() is called, the div is removed from the document, temporarily, so that the game can be updated
}

var scale = 25; // the scale of the game

function drawGrid(level) { // draws the table grid in which the gridded background of the game is created
    return createElements("table", { class: "background", style: `width: ${level.width * scale}px` }, ...level.levelInArray.map(row => createElements("tr", { style: `height: ${scale}px` }, ...row.map(type => createElements("td", { class: type }))))); // creates the background div for the game
}

function drawActors(actors) { // draw the upper layer, in which the actors are generated more frequently than the background
    return createElements("div", {}, ...actors.map(actor => {
        let rect = createElements("div", { class: `actor ${actor.type}` });
        rect.style.width = `${actor.size.x * scale}px`;
        rect.style.height = `${actor.size.y * scale}px`;
        rect.style.left = `${actor.position.x * scale}px`;
        rect.style.top = `${actor.position.y * scale}px`;
        return rect;
    }));
}

gameScreen.prototype.syncState = function(state) { // the function, attached to the prototype of the game screen class, used to sync the state of the actors and update them
    if (this.actorLayer) this.actorLayer.remove(); // remove the actore layer to re attach the changed, updated actor layer
    this.actorLayer = drawActors(state.actors); // drawing the new actors
    this.shownOnScreen.appendChild(this.actorLayer); // re add actor layer to the dom element shown on screen
    this.shownOnScreen.className = `game ${state.status}`; // setting the class of the game screen
    this.scrollPlayerIntoView(state); // scroll player into view before updating the screen
};

gameScreen.prototype.scrollPlayerIntoView = function(state) { // the function that handles the camera position by scrolling the player into view
    let width = this.shownOnScreen.clientWidth; // get the width of the game screen
    let height = this.shownOnScreen.clientHeight; // gets the height of the game screen
    let margin = width / 3; // the player has to be on either 1/3 of the screen going left or 2/3 of the screen going right for the scroll to occur
    let left = this.shownOnScreen.scrollLeft,
        right = left + width; // the display is scrolled horizontally
    let top = this.shownOnScreen.scrollTop,
        bottom = top + height; // the display is scrolled vertically
    let player = state.player; // the player variable is taken from the global state value containing information about all the actors
    let center = player.position.plus(player.size.times(0.5)).times(scale); // the center of the player is determined based on the player's current position, and this variable will be used to determine whether or not the display will be scrolled
    if (center.x < left + margin) { // if the player is in the left third of the screen
        this.shownOnScreen.scrollLeft = center.x - margin; // the display is scrolled left by removing the margin
    } else if (center.x > right - margin) { // if the player is on the right third of the screen
        this.shownOnScreen.scrollLeft = center.x + margin - width; // the display is scrolled right by adding the margin
    }
    if (center.y < top + margin) { // check if the player needs to be vertically scrolled
        this.shownOnScreen.scrollTop = center.y - margin; // verticall scroll up
    } else if (center.y > bottom - margin) { // check if player is in the lower third of the screen
        this.shownOnScreen.scrollTop = center.y + margin - height; // vertically scroll down
    }
};

Level.prototype.touches = function(position, size, type) { // collision detector for any element of the level
    var xStart = Math.floor(position.x);
    var xEnd = Math.ceil(position.x + size.x);
    var yStart = Math.floor(position.y);
    var yEnd = Math.ceil(position.y + size.y); // mapping the four corners of the actor//wall, used to determine whether or not another actor is inside of any of the four corners

    for (var y = yStart; y < yEnd; y++) { // goes through all the y values of the element
        for (var x = xStart; x < xEnd; x++) { // for each y value, goes through all the x values of the element
            let isOutside = x < 0 || x >= this.width || y < 0 || y >= this.height; // determines whether or not the element is being touched
            let here = isOutside ? "wall" : this.levelInArray[y][x];
            if (here == type) return true; // is the collision is detected, return true to the touches function
        }
    }
    return false; // if not touching, return false
};

State.prototype.update = function(time, keys) { // updates the State regularly based on the pressed keys and the time
    let actors = this.actors.map(actor => actor.update(time, this, keys)); // each type the state is updated, all the characters are mapped and are also individually udpated
    let newState = new State(this.level, actors, this.status); // the new state is created with all the updated actors
    if (newState.status != "playing") return newState; // the new state is only delivered if the current level is not won or lost to maximise efficiency
    let player = newState.player; // gets the player information to determine whether or not the player is touching a redblock
    if (this.level.touches(player.position, player.size, "RedBlock")) { // check if player is touching a redblock
        return new State(this.level, actors, "lost"); // if the player is touching the red block, a new state of "lost" is updated for as the global state
    }
    for (let actor of actors) { // going through each actors
        if (actor != player && overlap(actor, player)) { // check if two actors are colliding//overlapping (different function that the player and an element from the background div)
            newState = actor.collide(newState); // the new state is recreated based on the functions in the collide function of both actors
        }
    }
    return newState; // the new state is finally returned, and the game is updated accordingly
};

function overlap(actor1, actor2) { // used to determine if two actors are overlapping (used for coin collection, killing monsters, killing player)
    return actor1.position.x + actor1.size.x > actor2.position.x && actor1.position.x < actor2.position.x + actor2.size.x && actor1.position.y + actor1.size.y > actor2.position.y && actor1.position.y < actor2.position.y + actor2.size.y;
}

RedBlock.prototype.collide = function(state) { return new State(state.level, state.actors, "lost"); }; // when the player collides with the red block, the game is lost

Coin.prototype.collide = function(state) {
    let filtered = state.actors.filter(actor => actor != this); // filters the current coin actor from the list of actors
    coinCollected.play() // play the coin collected SFX when the coin is collected
    let status = state.status; // the current game status is returned (needed to update the state and to change win the game)
    if (!filtered.some(actor => actor.type == "coin")) { // checks if there are any coins left in the actor list
        gameWon.play();
        status = "won"; // play the game won SFX and set the status to win
    }
    return new State(state.level, filtered, status); // the game status is updated
};

RedBlock.prototype.update = function(time, state) { // the redblocks are updated based on there movement type (as determined in the intitial redblock class)
    let newposition = this.position.plus(this.speed.times(time)); // the new position is determined based by adding the position to the speed
    if (!state.level.touches(newposition, this.size, "wall")) {
        return new RedBlock(newposition, this.speed, this.reset); // if the redblock isn't touching any walls, then the current trajectory can be continue
    } else if (this.reset) {
        return new RedBlock(this.reset, this.speed, this.reset); // if the redblock the dripping kind, then the redblock is reset once it reaches the a wall to its initial position
    } else {
        return new RedBlock(this.position, this.speed.times(-1)); // if the redblock does not drip, the speed changed (direction is now opposite)
    }
};

function resetVariables() {
    Player.prototype.size = new Vector(0.8, 1.5); // the player size is reset
    RedBlockSpeed = 2.5;
    monsterSpeed = RedBlockSpeed * 2.5; // the monster and redblock seed are reset
    playerGravity = 38;
    playerXSpeed = 10; // the player specific speeds are reset
}

var wobbleSpeed = 8,
    wobbleDist = 0.07; // the wooble variables that determine how much a coin wobbles

Coin.prototype.update = function(time) { // updating the coin so that is wobbles
    let wobble = this.wobble + time * wobbleSpeed; // the amount that the coin is to be wobbled
    let wobbleposition = Math.sin(wobble) * wobbleDist; // the wobble position of the coin
    return new Coin(this.intialposition.plus(new Vector(0, wobbleposition)), this.intialposition, wobble); // the new, updated coin
};

var playerXSpeed = 10; // the player's horizontal speed
var playerGravity = 38; // the gravity
var jumpSpeed = 20; // the player's vertical speed

Player.prototype.update = function(time, state, keys) { // updating the player
    let xSpeed = 0; // set the x speed equal to zero, intially
    if (keys.ArrowLeft) xSpeed -= playerXSpeed; // if the left arrow key is pressed, then the player speed is subtracted from the x speed so that the player moves to the left
    if (keys.ArrowRight) xSpeed += playerXSpeed; // if the right arrow key is pressed, then the player speed is added to the x speed, so the player moves to the right
    let position = this.position; // the position of the player is retrieved
    let movedX = position.plus(new Vector(xSpeed * time, 0)); // the new position is created based on the x movements of the player
    if (!state.level.touches(movedX, this.size, "wall")) { // check if player is touching a wall
        position = movedX; // don't let player move any further in the direction of the wall;
    }

    let ySpeed = this.speed.y + time * playerGravity; // the y speed is a function of the current y speed and the time multiplied by the gravity
    let movedY = position.plus(new Vector(0, ySpeed * time)); // the moved vertical position is created by a change in the y speed of an object
    if (!state.level.touches(movedY, this.size, "wall")) { // if the player touches a redblock
        position = movedY; // don't let the player move
    } else if ((keys.w && ySpeed > 0) || (keys.ArrowUp && ySpeed > 0) || ((keys.Space) && ySpeed > 0)) { // check if player jumped (but disable double jumps)
        ySpeed = -jumpSpeed; // subtract the jump speed from y speed to increase player y position
    } else {
        ySpeed = 0; // set player y speed equal to 0
    }
    return new Player(position, new Vector(xSpeed, ySpeed)); // the new player is returned, with the x speed and y speed updating the player's new position
};

function trackKeys(keys) { // function which sets up the keys that need to be tracked for the game input
    let down = Object.create(null); // check is a key is down
    function track(event) { // tracks all events
        if (keys.includes(event.key)) { // if the keys variable includes the event key
            down[event.key] = event.type == "keydown"; // set down equal to key down
            event.preventDefault(); // prevent default function
        }
    }
    window.addEventListener("keydown", track); // tracks the key when it is pressed
    window.addEventListener("keyup", track); // tracks when the key is release
    return down; // used to end the function
}

var arrowKeys = trackKeys(["ArrowLeft", "ArrowRight", "ArrowUp"]); // defining the keys that will be tracked to accept game input

function runAnimation(frameFunc) {
    let lastTime = null; // variable containing information about the last time that animation was run, intially set to null
    function frame(time) { // the frame is generated as a function of time
        if (lastTime != null) { // if last time is not defined
            let timeStep = Math.min(time - lastTime, 500) / 1000; // the tiem step at which the frames are generated
            if (frameFunc(timeStep) === false) return; // if frame func is not a function of the timestep, then end this function
        }
        lastTime = time; // updating last time variable
        requestAnimationFrame(frame); // getting new frame
    }
    requestAnimationFrame(frame); // getting new frame 
}

function runLevel(level, Display) { // function which is used to run each individual level
    let display = new Display(document.getElementById("actual-game-div"), level); // setting up the display by creating a new display with the gameScreen function
    let state = State.start(level); // the state variable is assigned a state and is initialized when a new level is loaded
    let ending = 1; // ending = 1 = false (game not over)
    return new Promise(resolve => { // new promis (required for the upcoming async function)
        runAnimation(time => { // the animation is run
            state = state.update(time, arrowKeys); // the state is updated with each frame
            if (state.status == "lost") {
                gameLost.play(); // the game is lost, play the game lost sound
            }
            display.syncState(state); // sync state between actor and background layer
            if (state.status == "playing") { // check if playing
                return true;
            } else if (ending > 0) { // if ending is false
                ending -= time;
                return true; // if not ended, return true to continue letting the game play
            } else { // otherwise unload the level, and return false
                display.clear();
                resolve(state.status);
                return false;
            }
        });
    });
}

async function runGame(plans, Display) { // async funciton used to run game (processes can occur in any order)
    for (let level = globalLevel; level < plans.length;) { // for loop running through all the levels of the game
        let status = await runLevel(new Level(plans[level]), // awaiting the outcome of the level (to see whether player won or lost the level)
            Display);
        if (status == "won") {
            globalLevel++; // if the player won, progress to next level, and reset powerup variables
            resetVariables();
        } else {
            deaths++; // if the player lost, add one to the death counter and restart the level, and reset powerup variables
            resetVariables();
        }
        saveProgress(); // save progress to database
        updateLeaderboard(); // update the leaderboard
        document.getElementById("stats").innerHTML = `deaths: ${deaths}, level: ${globalLevel}, ratio: ${(Math.round((globalLevel / (deaths)) * 100)) / 100} (current session)` // update users current state bar
        level = globalLevel; // update for loop variable
    }
    document.getElementById("stats").innerHTML = "you won the game!"; // win message displayed if user beats all the levels
}